// ==UserScript==
// @name         GGSEL Auto Offer Wizard ‚Äî vibe.coding
// @namespace    https://vibe.coding/ggsel
// @version      1.0.5
// @description  –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ offer'–∞: –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞, FSM –ø–æ —à–∞–≥–∞–º (create ‚Üí pricing ‚Üí instructions), –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—ç—à, ¬´–ù–∏–∫–Ω–µ–π–º¬ª/¬´–†–µ–≥–∏–æ–Ω¬ª, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–ª–∏–∫–∏ Ant Select. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ RU/EN –≤ –º–æ–¥–∞–ª–∫–∞—Ö (aria-selected="true") –∏ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π FSM (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ + watchdog –ª–æ–∫–æ–≤). –°—Ç–∞—Ä—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–∞–∫–∂–µ —Å sellers-office edit/{id}.
// @author       vibe.coding
// @match        https://seller.ggsel.net/offers/create*
// @match        https://seller.ggsel.net/offers/edit/*
// @match        https://sellers-office.ggsel.net/offers/edit/*
// @grant        GM_addStyle
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_setClipboard
// ==/UserScript==

(function () {
  'use strict';

  // ==========================
  // üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ + —É—Ç–∏–ª–∏—Ç—ã
  // ==========================
  const NS = 'vibe.ggsel.autoOffer';
  const DEF_STATE = {
    started: false,
    phase: 'idle',
    stage: 'stage1',
    market: 'RU',
    gameNameRu: '',
    gameNameEn: '',
    useNick: false,
    useRegion: false,
    offerId: null,
    lastUrl: location.href,
    desc: { ru: '', en: '', kz: '', kzEn: '' },
    logs: []
  };
  const STAGE_META = {
    stage1: { label: '–≠—Ç–∞–ø 1 ‚Äî –ù–∞–∑–≤–∞–Ω–∏—è', donePhase: 'stage1_done' },
    stage2: { label: '–≠—Ç–∞–ø 2 ‚Äî –¶–µ–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', donePhase: 'stage2_done' },
    stage3: { label: '–≠—Ç–∞–ø 3 ‚Äî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', donePhase: 'done' }
  };
  const STAGE_LINK_URL = 'https://key-steam.store/gift';
  const persist = {
    set(k, v) { try { GM_setValue(`${NS}.${k}`, v); } catch { localStorage.setItem(`${NS}.${k}`, JSON.stringify(v)); } },
    get(k, d) { try { const v = GM_GetValue(`${NS}.${k}`, undefined); return v === undefined ? _ls(k, d) : v; } catch { return _ls(k, d); }
      function _ls(key, def){ const raw = localStorage.getItem(`${NS}.${key}`); return raw ? JSON.parse(raw) : def; } },
    del(k) { try { GM_deleteValue(`${NS}.${k}`); } catch { localStorage.removeItem(`${NS}.${k}`); } }
  };
  function GM_GetValue(k, d){ try { return GM_getValue(k, d); } catch { return d; } }

  let state = Object.assign({}, DEF_STATE, persist.get('state', DEF_STATE));
  if (!STAGE_META[state.stage]) state.stage = 'stage1';

  function saveState(){ persist.set('state', state); }
  function nowTs(){ return new Date().toLocaleTimeString(); }
  function log(msg){
    const line = `[${nowTs()}] ${msg}`;
    console.debug(line);
    state.logs.push(line);
    if (state.logs.length > 400) state.logs.splice(0, state.logs.length - 400);
    saveState();
    const box = document.querySelector('#vibe-log-box');
    if (box){ const d=document.createElement('div'); d.textContent=line; box.appendChild(d); box.scrollTop=box.scrollHeight; }
  }
  const sleep = (ms)=> new Promise(r=>setTimeout(r, ms));

  async function waitForSelector(sel, { root=document, timeout=15000, mustBeVisible=true } = {}) {
    const t0 = performance.now();
    while (performance.now() - t0 < timeout) {
      const el = root.querySelector(sel);
      if (el && (!mustBeVisible || isVisible(el))) return el;
      await sleep(80);
    }
    return null;
  }
  function waitFor(cond, timeout=15000){
    const t0=performance.now();
    return (async function loop(){
      while (performance.now()-t0 < timeout){
        const r = cond();
        if (r) return r;
        await sleep(80);
      }
      return null;
    })();
  }
  function isVisible(el){ const r = el.getBoundingClientRect(); return !!(el.offsetParent !== null || r.width || r.height); }

  // ‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ React/AntD-–ø–æ–ª—è
  function setReactValue(el, value){
    if(!el) return;
    const proto = el.tagName === 'TEXTAREA' ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype;
    const setter = Object.getOwnPropertyDescriptor(proto, 'value')?.set;
    if (setter) setter.call(el, value); else el.value = value;
    el.dispatchEvent(new Event('input', { bubbles:true }));
    el.dispatchEvent(new Event('change', { bubbles:true }));
    el.focus();
    el.dispatchEvent(new KeyboardEvent('keydown', { bubbles:true, key:'End' }));
    el.dispatchEvent(new KeyboardEvent('keyup', { bubbles:true, key:'End' }));
    el.blur();
  }

  function clickEl(el){
    if(!el) return;
    try{ if(typeof el.click==='function'){ el.click(); return; } }catch{}
    try{ el.dispatchEvent(new MouseEvent('click', { bubbles:true, cancelable:true })); }
    catch{ el.dispatchEvent(new Event('click', { bubbles:true, cancelable:true })); }
  }

  // üéØ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–ª–∏–∫ (pointer/mouse + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  function realisticClick(el){
    if(!el) return;
    try{
      el.scrollIntoView({ block:'center', inline:'center' });
      const r = el.getBoundingClientRect();
      const cx = Math.max(1, r.left + Math.min(r.width-1, r.width/2));
      const cy = Math.max(1, r.top  + Math.min(r.height-1, r.height/2));
      const opts = { bubbles:true, cancelable:true, clientX:cx, clientY:cy };
      try { el.dispatchEvent(new PointerEvent('pointerdown', opts)); } catch {}
      el.dispatchEvent(new MouseEvent('mousedown', opts));
      el.focus();
      el.dispatchEvent(new MouseEvent('mouseup', opts));
      try { el.dispatchEvent(new PointerEvent('pointerup', opts)); } catch {}
      el.dispatchEvent(new MouseEvent('click', opts));
    } catch { clickEl(el); }
  }

  function findByText(selector, text, { root=document, exact=true } = {}){
    const items = root.querySelectorAll(selector);
    const needle = text.replace(/\s+/g,' ').trim();
    for (const el of items){
      const got = (el.textContent||'').replace(/\s+/g,' ').trim();
      if(exact ? got===needle : got.includes(needle)) return el;
    }
    return null;
  }

  function copyToClipboard(text){
    try { GM_setClipboard(text); }
    catch { navigator.clipboard?.writeText(text).catch(()=>{}); }
  }

  function getStageMeta(stage){ return STAGE_META[stage] || STAGE_META.stage1; }
  function getStageLabel(stage){ return getStageMeta(stage).label; }
  function finishStage(message){
    const meta = getStageMeta(state.stage);
    state.started = false;
    state.phase = meta.donePhase || 'idle';
    saveState();
    refreshPhase();
    if (message) log(message);
    log(`‚úÖ ${meta.label} –∑–∞–≤–µ—Ä—à—ë–Ω.`);
  }

  // ==========================
  // üéõÔ∏è –ü–∞–Ω–µ–ª—å
  // ==========================
  const css = `
#vibe-panel{position:fixed;right:16px;top:96px;width:360px;z-index:999999;background:#0d0f12;color:#e7e7e7;border:1px solid #2a2f36;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.45);font-family:"JetBrains Mono",ui-monospace,Menlo,Consolas,monospace;}
#vibe-panel .hd{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border-bottom:1px solid #242933;font-weight:700;}
#vibe-panel .bd{padding:10px 12px;}
#vibe-panel .row{margin-bottom:10px;}
#vibe-panel label{display:block;font-size:12px;opacity:.9;margin-bottom:4px;}
#vibe-panel input[type="text"],#vibe-panel textarea{width:100%;background:#12161c;color:#eee;border:1px solid #2d3440;border-radius:8px;padding:8px 10px;outline:none;}
#vibe-panel input[type="text"]:focus,#vibe-panel textarea:focus{border-color:#5a9cff;}
#vibe-panel .chips{display:flex;gap:6px;flex-wrap:wrap;}
#vibe-panel .chip{padding:4px 8px;background:#151a21;border:1px solid #2d3440;border-radius:999px;cursor:pointer;user-select:none;font-size:12px;}
#vibe-panel .chip.active{border-color:#5a9cff;background:rgba(90,156,255,.15);}
#vibe-panel .btn{width:100%;padding:10px 12px;background:#0e7a29;border:1px solid #19923a;color:#fff;border-radius:10px;cursor:pointer;font-weight:700;}
#vibe-panel .btn.secondary{background:#19202a;border-color:#2e3a4a;color:#eaeef5;}
#vibe-panel .btn.warn{background:#3a1b1b;border-color:#6b2a2a;}
#vibe-panel .tabs{display:flex;gap:6px;margin-bottom:8px;}
#vibe-panel .tab{padding:6px 10px;border:1px solid #2d3440;border-radius:8px;cursor:pointer;background:#141a22;font-size:12px;}
#vibe-panel .tab.active{border-color:#9b82ff;background:rgba(155,130,255,.18);}
#vibe-log-box{height:180px;overflow:auto;border:1px solid #262c36;border-radius:8px;background:#0c0f14;padding:6px 8px;font-size:12px;line-height:1.3;}
#vibe-row-actions{display:flex;gap:8px;}
#vibe-id-badge{display:flex;gap:8px;align-items:center;}
#vibe-id{font-weight:700;color:#a8ffad;}
`;
  try { GM_addStyle(css); } catch(e){ const st=document.createElement('style'); st.textContent=css; document.head.appendChild(st); }

  function ensurePanel(){
    if(document.querySelector('#vibe-panel')) return;
    const host=document.createElement('div');
    host.id='vibe-panel';
    host.innerHTML=`
      <div class="hd"><div>Auto Offer Wizard</div><div class="small">phase: <span id="vibe-phase">${state.phase}</span></div></div>
      <div class="bd">
        <div class="row"><label>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (RU/KZ)</label><input id="vibe-game-ru" type="text" placeholder="–ù–∞–ø—Ä.: ARK: Survival Evolved"></div>
        <div class="row"><label>–ù–∞–∑–≤–∞–Ω–∏–µ (EN) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ</label><input id="vibe-game-en" type="text" placeholder="If blank ‚Äî will use RU"></div>
        <div class="row"><label>–†—ã–Ω–æ–∫</label><div class="chips"><div class="chip" data-market="RU">RU</div><div class="chip" data-market="KZ">KZ</div></div></div>
        <div class="row">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è)</label>
          <div class="tabs"><div class="tab" data-dtab="ru">ru</div><div class="tab" data-dtab="en">en</div><div class="tab" data-dtab="kz">kz</div><div class="tab" data-dtab="kzEn">kz-eng</div></div>
          <textarea id="vibe-desc" rows="5" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ/–Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"></textarea>
        </div>
        <div class="row"><label>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</label><div class="chips"><div class="chip" data-flag="useNick">–ù–∏–∫–Ω–µ–π–º</div><div class="chip" data-flag="useRegion">–†–µ–≥–∏–æ–Ω</div></div></div>
        <div class="row"><label>–≠—Ç–∞–ø</label><div class="chips"><div class="chip" data-stage="stage1">–≠—Ç–∞–ø 1</div><div class="chip" data-stage="stage2">–≠—Ç–∞–ø 2</div><div class="chip" data-stage="stage3">–≠—Ç–∞–ø 3</div></div></div>
        <div class="row" id="vibe-id-badge" style="display:none;"><span class="small">Offer ID:</span><span id="vibe-id">‚Äî</span><button class="chip" id="vibe-copy-id">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button></div>
        <div class="row" id="vibe-row-actions"><button class="btn" id="vibe-run">–ó–∞–ø–æ–ª–Ω–∏—Ç—å</button><button class="btn secondary" id="vibe-continue">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button><button class="btn warn" id="vibe-reset">–°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à</button></div>
        <div class="row"><label>–õ–æ–≥–∏</label><div id="vibe-log-box"></div></div>
      </div>`;
    document.body.appendChild(host);

    const gameRu = host.querySelector('#vibe-game-ru');
    const gameEn = host.querySelector('#vibe-game-en');
    const descArea = host.querySelector('#vibe-desc');
    const tabs=[...host.querySelectorAll('.tab')];
    const chipsMarket=[...host.querySelectorAll('.chip[data-market]')];
    const chipsFlags=[...host.querySelectorAll('.chip[data-flag]')];
    const chipsStage=[...host.querySelectorAll('.chip[data-stage]')];

    gameRu.value=state.gameNameRu||'';
    gameEn.value=state.gameNameEn||'';

    let activeDTab = persist.get('activeDTab','ru');
    function renderDescTab(){ tabs.forEach(t=>t.classList.toggle('active', t.getAttribute('data-dtab')===activeDTab)); descArea.value = state.desc[activeDTab] || ''; }
    function renderMarket(){ chipsMarket.forEach(c=>c.classList.toggle('active', c.getAttribute('data-market')===state.market)); }
    function renderFlags(){ chipsFlags.forEach(c=>c.classList.toggle('active', !!state[c.getAttribute('data-flag')])); }
    function renderStage(){ chipsStage.forEach(c=>c.classList.toggle('active', c.getAttribute('data-stage')===state.stage)); }

    gameRu.addEventListener('input', ()=>{ state.gameNameRu=gameRu.value; saveState(); });
    gameEn.addEventListener('input', ()=>{ state.gameNameEn=gameEn.value; saveState(); });
    descArea.addEventListener('input', ()=>{ state.desc[activeDTab]=descArea.value; saveState(); });
    tabs.forEach(t=>t.addEventListener('click', ()=>{ activeDTab=t.getAttribute('data-dtab'); persist.set('activeDTab', activeDTab); renderDescTab(); }));
    chipsMarket.forEach(c=>c.addEventListener('click', ()=>{ state.market=c.getAttribute('data-market'); saveState(); renderMarket(); log(`–†—ã–Ω–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ ${state.market}`); }));
    chipsFlags.forEach(c=>c.addEventListener('click', ()=>{ const k=c.getAttribute('data-flag'); state[k]=!state[k]; saveState(); renderFlags(); log(`–§–ª–∞–≥ ${k} = ${state[k]?'ON':'OFF'}`); }));
    chipsStage.forEach(c=>c.addEventListener('click', ()=>{ state.stage=c.getAttribute('data-stage'); saveState(); renderStage(); log(`–í—ã–±—Ä–∞–Ω ${getStageLabel(state.stage)}`); }));

    host.querySelector('#vibe-run').addEventListener('click', onRun);
    host.querySelector('#vibe-continue').addEventListener('click', ()=>{ state.started = true; saveState(); scheduleNext(50); });
    host.querySelector('#vibe-reset').addEventListener('click', ()=>{
      state = Object.assign({}, DEF_STATE, { logs:[] });
      saveState(); renderMarket(); renderFlags(); renderDescTab(); renderStage();
      gameRu.value=''; gameEn.value='';
      host.querySelector('#vibe-phase').textContent = state.phase;
      host.querySelector('#vibe-log-box').innerHTML='';
      document.querySelector('#vibe-id-badge').style.display='none';
      log('–ö—ç—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω—ã.');
    });
    host.querySelector('#vibe-copy-id').addEventListener('click', ()=>{ if(state.offerId){ copyToClipboard(state.offerId); log(`ID ${state.offerId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.`); } });

    (state.logs||[]).forEach(l=>{ const d=document.createElement('div'); d.textContent=l; host.querySelector('#vibe-log-box').appendChild(d); });
    renderMarket(); renderFlags(); renderStage(); renderDescTab(); refreshIdBadge();
  }

  function refreshPhase(){ const el=document.querySelector('#vibe-phase'); if(el) el.textContent=state.phase; }
  function refreshIdBadge(){ const wrap=document.querySelector('#vibe-id-badge'); const idEl=document.querySelector('#vibe-id'); if(!wrap) return; if(state.offerId){ wrap.style.display=''; if(idEl) idEl.textContent=state.offerId; } else wrap.style.display='none'; }

  function onRun(){
    const stage = state.stage || 'stage1';
    if (stage === 'stage1' && !state.gameNameRu?.trim() && isCreatePage()) { log('‚ùó –í–≤–µ–¥–∏—Ç–µ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (RU/KZ)¬ª'); return; }

    let nextPhase = null;
    if (stage === 'stage1'){
      nextPhase = 'fill_general';
    } else if (stage === 'stage2'){
      if (isPricingPage()) nextPhase = 'pricing_price';
      else if (isCreatePage()) nextPhase = 'goto_pricing';
      else if (isInstructionsPage()){
        log('‚ö†Ô∏è –≠—Ç–∞–ø 2 –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞¬ª.');
        state.started = false; saveState(); refreshPhase(); return;
      } else nextPhase = 'goto_pricing';
    } else if (stage === 'stage3'){
      if (isInstructionsPage()) nextPhase = 'instructions_ru';
      else if (isPricingPage()) nextPhase = 'pricing_next';
      else {
        log('‚ö†Ô∏è –≠—Ç–∞–ø 3 –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö ¬´–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞¬ª –∏–ª–∏ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è¬ª.');
        state.started = false; saveState(); refreshPhase(); return;
      }
    }

    if (!nextPhase){ log('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–∑—É –∑–∞–ø—É—Å–∫–∞.'); return; }

    state.started = true;
    state.phase = nextPhase;
    saveState(); refreshPhase();
    scheduleNext(50);
    log(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫: ${getStageLabel(stage)} (—Ñ–∞–∑–∞ ${state.phase})`);
  }

  // ==========================
  // üìç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
  // ==========================
  function isCreatePage(){
    const hdr = findByText('.style_OffersCreationTitleWithHint__fa4kw h5, h5', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', { exact:true });
    return !!hdr || location.pathname.includes('/offers/create');
  }
  function isPricingPage(){
    const hdr = findByText('h5', '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞', { exact:true });
    return !!hdr || location.pathname.includes('/pricing');
  }
  function isInstructionsPage(){
    const hdr = findByText('.style_OffersCreationTitleWithHint__fa4kw h5, h5', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è', { exact:true });
    return !!hdr || location.pathname.includes('/instructions');
  }
  function extractOfferIdFromUrl(){
    const m = location.pathname.match(/\/offers\/edit\/(\d+)(?:\/|$)/);
    return m ? m[1] : null;
  }

  // ==========================
  // üö¶ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ + FSM
  // ==========================
  let nextTimer = null;
  function scheduleNext(ms=250){
    if (nextTimer) { clearTimeout(nextTimer); nextTimer=null; }
    nextTimer = setTimeout(()=>{ nextTimer=null; resumeFlow(); }, ms);
  }

  let phaseRunning = false;
  let phaseLockAt  = 0;

  async function resumeFlow(){
    // watchdog –ª–æ–∫–∞ > 15s
    if (phaseRunning){
      const age = performance.now() - phaseLockAt;
      if (age > 15000){
        phaseRunning = false;
        log('üßØ –°–Ω—è–ª –∑–∞–≤–∏—Å—à–∏–π –ª–æ–∫ —Ñ–∞–∑—ã (>15s). –ü—Ä–æ–¥–æ–ª–∂–∞—é.');
      } else return;
    }
    phaseRunning = true; phaseLockAt = performance.now();
    refreshPhase();

    try{
      if (!state.started) return;

      const oid = extractOfferIdFromUrl();
      if (oid && oid !== state.offerId){ state.offerId=oid; saveState(); refreshIdBadge(); log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω Offer ID: ${oid}`); }

      switch(state.phase){
        case 'fill_general': await phaseFillGeneral(); break;
        case 'fill_en': await phaseFillEN(); break;
        case 'goto_pricing': await phaseGotoPricing(); break;
        case 'pricing_price': await phasePricingPrice(); break;
        case 'pricing_add_nick': await phasePricingAddNick(); break;
        case 'pricing_add_region': await phasePricingAddRegion(); break;
        case 'pricing_next': await phasePricingNext(); break;
        case 'instructions_ru': await phaseInstructionsRU(); break;
        case 'instructions_en': await phaseInstructionsEN(); break;
        case 'stage1_done':
        case 'stage2_done':
        case 'done': break;
        default: log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞: ${state.phase}`); break;
      }
    } catch(err){
      log(`‚ùå –û—à–∏–±–∫–∞: ${err?.message||err}`);
      console.error(err);
    } finally {
      phaseRunning = false;
    }
  }

  // ==========================
  // üß† –Ø–∑—ã–∫–æ–≤—ã–µ —Ç–∞–±—ã –≤ –º–æ–¥–∞–ª–∫–µ
  // ==========================
  /**
   * –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–π —Ç–∞–± —è–∑—ã–∫–∞ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏ –∏ –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è aria-selected="true".
   * @param {Element} modal  ‚Äî –∫–æ—Ä–µ–Ω—å –º–æ–¥–∞–ª–∫–∏
   * @param {'ru'|'en'} lang ‚Äî –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
   * @returns {Promise<boolean>} true, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
   */
  async function ensureModalLang(modal, lang){
    const LC = String(lang).toLowerCase();
    const UC = LC.toUpperCase();

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É –∫–Ω–æ–ø–∫—É —Ç–∞–±–∞ –ø–æ —Ç–µ–∫—Å—Ç—É ("RU"/"EN")
    const findBtn = () =>
      findByText('.ant-tabs-tab .ant-tabs-tab-btn, .ant-tabs-tab[role="tab"] .ant-tabs-tab-btn', UC, { root: modal, exact:true });

    let btn = findBtn();
    if (!btn) { log(`‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–± ${UC} –≤ –º–æ–¥–∞–ª–∫–µ`); return false; }

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –æ–∫
    if (btn.getAttribute('aria-selected') === 'true') return true;

    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –∏ –∂–¥—ë–º aria-selected="true" –∏–ª–∏ .ant-tabs-tab-active
    realisticClick(btn);
    const ok = !!(await waitFor(() => {
      const b = findBtn();
      if (!b) return false;
      const sel = b.getAttribute('aria-selected') === 'true';
      const active = b.closest('.ant-tabs-tab')?.classList.contains('ant-tabs-tab-active');
      return sel || active;
    }, 2000));

    if (!ok) log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–± ${UC}`);
    return ok;
  }

  // ==========================
  // üß© –§–∞–∑—ã (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–π ‚Äî —á–µ—Ä–µ–∑ scheduleNext)
  // ==========================

  // CREATE: RU
  async function phaseFillGeneral(){
    if(!isCreatePage()){ log('–û–∂–∏–¥–∞–Ω–∏–µ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è¬ª...'); scheduleNext(500); return; }
    log('–§–∞–∑–∞: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ RU –ø–æ–ª–µ–π.');
    const marker = await waitFor(()=>findByText('.style_OffersCreationTitleWithHint__fa4kw h5, h5', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', { exact:true }), 15000);
    if(!marker){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è¬ª.'); scheduleNext(500); return; }

    const titleRu = await waitForSelector('#titleRu');
    if(!titleRu){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ #titleRu'); scheduleNext(500); return; }
    const ruTitle = `${state.gameNameRu.trim()} ‚Äî Steam ‚Äî ${state.market} ‚Äî –∞–≤—Ç–æ`;
    setReactValue(titleRu, ruTitle); log(`–ù–∞–∑–≤–∞–Ω–∏–µ RU ‚Üí ${ruTitle}`);

    const descRuEl = await waitForSelector('#descriptionRu');
    if(!descRuEl){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ #descriptionRu'); scheduleNext(500); return; }
    const ruDesc = state.market==='RU' ? (state.desc.ru||'') : (state.desc.kz||'');
    setReactValue(descRuEl, ruDesc); log(`–û–ø–∏—Å–∞–Ω–∏–µ RU –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (${ruDesc.length} —Å–∏–º–≤.).`);

    const redirectInput = await waitForSelector('#redirectUrl');
    if (redirectInput){
      if ((redirectInput.value||'').trim() !== STAGE_LINK_URL){
        setReactValue(redirectInput, STAGE_LINK_URL);
        log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ https://key-steam.store/gift.');
      } else {
        log('–°—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
      }
    } else log('‚ö†Ô∏è –ü–æ–ª–µ redirectUrl –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    state.phase='fill_en'; saveState(); refreshPhase();
    scheduleNext(200);
  }

  // CREATE: EN
  async function phaseFillEN(){
    if(!isCreatePage()){ scheduleNext(500); return; }
    log('–§–∞–∑–∞: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ EN –≤–∫–ª–∞–¥–∫–∏.');

    let enTab =
      findByText('.ant-tabs-tab .ant-tabs-tab-btn, .ant-tabs-tab[role="tab"] .ant-tabs-tab-btn', 'EN', { exact:true }) ||
      document.querySelector('[data-node-key="en"] .ant-tabs-tab-btn, [data-node-key="en"]') ||
      document.querySelector('[id^="rc-tabs-"][id$="-tab-en"]');
    if(!enTab){ await sleep(200);
      enTab =
        findByText('.ant-tabs-tab .ant-tabs-tab-btn, .ant-tabs-tab[role="tab"] .ant-tabs-tab-btn', 'EN', { exact:true }) ||
        document.querySelector('[data-node-key="en"] .ant-tabs-tab-btn, [data-node-key="en"]') ||
        document.querySelector('[id^="rc-tabs-"][id$="-tab-en"]'); }
    if(!enTab){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ EN'); scheduleNext(500); return; }
    realisticClick(enTab); await sleep(250);

    let titleEn = await waitForSelector('#titleEn');
    let descEnEl = await waitForSelector('#descriptionEn');
    if(!titleEn || !descEnEl){ realisticClick(enTab); await sleep(250); titleEn = await waitForSelector('#titleEn'); descEnEl = await waitForSelector('#descriptionEn'); }
    if(!titleEn || !descEnEl){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω—ã EN –ø–æ–ª—è (#titleEn / #descriptionEn)'); scheduleNext(500); return; }

    const gameEn = state.gameNameEn?.trim() || state.gameNameRu?.trim();
    const enTitle = `${gameEn} ‚Äì Steam ‚Äì ${state.market} ‚Äì auto`;
    setReactValue(titleEn, enTitle); log(`–ù–∞–∑–≤–∞–Ω–∏–µ EN ‚Üí ${enTitle}`);

    const enDesc = state.market==='RU' ? (state.desc.en||'') : ((state.desc.kzEn&&state.desc.kzEn.trim())?state.desc.kzEn:(state.desc.en||''));
    setReactValue(descEnEl, enDesc); log(`–û–ø–∏—Å–∞–Ω–∏–µ EN –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (${enDesc.length} —Å–∏–º–≤.).`);

    const nextBtn = await waitFor(()=> findByText('button span', '–î–∞–ª–µ–µ', { exact:true })?.closest('button'), 10000);
    if(!nextBtn){ log('‚ùó –ö–Ω–æ–ø–∫–∞ ¬´–î–∞–ª–µ–µ¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –∏ –∑–∞—Ç–µ–º ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.'); state.phase='goto_pricing'; saveState(); refreshPhase(); scheduleNext(600); return; }
    realisticClick(nextBtn); log('–ù–∞–∂–∞—Ç–∞ ¬´–î–∞–ª–µ–µ¬ª ‚Üí Pricing...');
    state.phase='goto_pricing'; saveState(); refreshPhase();
    scheduleNext(800);
  }

  // PRICING: –ø–µ—Ä–µ—Ö–æ–¥
  async function phaseGotoPricing(){
    if(!isPricingPage()){
      const ok = await waitFor(()=>isPricingPage(), 15000);
      if(!ok){ log('‚ùó –ù–µ –≤–∏–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞¬ª.'); scheduleNext(800); return; }
    }
    log('–§–∞–∑–∞: Pricing ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã.');
    state.offerId = extractOfferIdFromUrl() || state.offerId; saveState(); refreshIdBadge();
    if (state.stage === 'stage1'){
      finishStage('–ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —à–∞–≥ ¬´–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞¬ª. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–∞–ø 2.');
      return;
    }
    state.phase='pricing_price'; saveState(); refreshPhase();
    scheduleNext(200);
  }

  // PRICING: —Ü–µ–Ω–∞ –∏ —Ä–µ–∂–∏–º
  async function phasePricingPrice(){
    if(!isPricingPage()){ scheduleNext(600); return; }
    log('–§–∞–∑–∞: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –∏ —Ä–µ–∂–∏–º–∞.');

    const priceInput = await waitForSelector('#offerCost');
    if(!priceInput){ log('‚ùó –ü–æ–ª–µ #offerCost –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); scheduleNext(600); return; }
    setReactValue(priceInput, '99999'); log('–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: 99999');

    const unl = await waitFor(()=> findByText('.ant-segmented-item .ant-segmented-item-label', '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π', { exact:true }), 5000);
    if (unl){ realisticClick(unl); log('–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π'); await sleep(150); }
    else { log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ¬´–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π¬ª. –ü—Ä–æ–ø—É—Å–∫–∞—é.'); }

    if (state.useNick) state.phase='pricing_add_nick';
    else if (state.useRegion) state.phase='pricing_add_region';
    else state.phase='pricing_next';
    saveState(); refreshPhase();
    scheduleNext(200);
  }

  // helper: –º–æ–¥–∞–ª ¬´–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞¬ª
  async function openAddParamModal(){
    const addBtn = [...document.querySelectorAll('button')].find(b=>/–î–æ–±–∞–≤–∏—Ç—å/i.test(b.textContent||''));
    if(!addBtn){ log('‚ùó –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); return null; }
    const knownModals = new Set([...document.querySelectorAll('.ant-modal-content')]);
    for (let attempt=1; attempt<=3; attempt++){
      realisticClick(addBtn);
      log(`–û—Ç–∫—Ä—ã–≤–∞—é –º–æ–¥–∞–ª ¬´–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞¬ª (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})...`);
      const modal = await waitFor(() => {
        const modals = [...document.querySelectorAll('.ant-modal-content')].filter(m=>isVisible(m));
        const fresh = modals.find(m=>!knownModals.has(m));
        return fresh || modals[0] || null;
      }, 3000);
      if (modal) return modal;
      log('‚ö†Ô∏è –ú–æ–¥–∞–ª –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –ø–æ–≤—Ç–æ—Ä—è—é –Ω–∞–∂–∞—Ç–∏–µ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª.');
      await sleep(200);
    }
    log('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.');
    return null;
  }

  // helper: –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—à–∫—É —Ç–∏–ø–æ–≤
  async function openTypeDropdown(modal){
    const selector = modal.querySelector('.ant-select-selector');
    if (!selector){ log('‚ùó –í –º–æ–¥–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω .ant-select-selector'); return null; }
    for (let i=1; i<=3; i++){
      realisticClick(selector);
      await sleep(120);
      const wrap = selector.querySelector('.ant-select-selection-wrap') || selector;
      realisticClick(wrap);
      await sleep(120);
      const combo = modal.querySelector('.ant-select-selection-search-input[role="combobox"]');
      if (combo){
        combo.focus();
        const hadRO = combo.hasAttribute('readonly');
        if (hadRO) combo.removeAttribute('readonly');
        combo.dispatchEvent(new KeyboardEvent('keydown', { bubbles:true, key:'Enter' }));
        combo.dispatchEvent(new KeyboardEvent('keyup',   { bubbles:true, key:'Enter' }));
        combo.dispatchEvent(new KeyboardEvent('keydown', { bubbles:true, key:' ' }));
        combo.dispatchEvent(new KeyboardEvent('keyup',   { bubbles:true, key:' ' }));
        combo.dispatchEvent(new KeyboardEvent('keydown', { bubbles:true, key:'ArrowDown' }));
        combo.dispatchEvent(new KeyboardEvent('keyup',   { bubbles:true, key:'ArrowDown' }));
        if (hadRO) combo.setAttribute('readonly','');
        await sleep(80);
      }
      const dd = [...document.querySelectorAll('.ant-select-dropdown')].find(d=>!d.classList.contains('ant-select-dropdown-hidden'));
      if (dd) return dd;
      log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ #${i} –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –ø—Ä–æ–±—É—é –µ—â—ë...`);
      await sleep(150);
    }
    return null;
  }

  function findOptionInDropdown(dd, labels){
    for (const lbl of labels){
      const node = findByText('.ant-select-item .ant-select-item-option-content', lbl, { root: dd, exact:true });
      if (node) return node.closest('.ant-select-item');
    }
    for (const lbl of labels){
      const aria = [...dd.querySelectorAll('[role="option"]')].find(o=>{
        const a = (o.getAttribute('aria-label')||'').trim();
        const t = (o.textContent||'').trim();
        return a===lbl || t===lbl;
      });
      if (aria) return aria;
    }
    return null;
  }

  async function chooseParamType(modal, labels){
    const dd = await openTypeDropdown(modal);
    if (!dd){ log('‚ùó –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è'); return false; }
    const opt = findOptionInDropdown(dd, labels);
    if (!opt){ log(`‚ùó –í —Å–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–ø: ${labels.join(' / ')}`); return false; }
    realisticClick(opt);
    log(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: ${(opt.textContent||'').trim()}`);
    await sleep(120);
    return true;
  }

  // PRICING: ¬´–ù–∏–∫–Ω–µ–π–º¬ª
  async function phasePricingAddNick(){
    if(!isPricingPage()){ scheduleNext(600); return; }
    log('–§–∞–∑–∞: –î–æ–±–∞–≤–ª—è—é –ø–∞—Ä–∞–º–µ—Ç—Ä ¬´–ù–∏–∫–Ω–µ–π–º¬ª.');

    const modal = await openAddParamModal();
    if(!modal){ scheduleNext(600); return; }

    const okType = await chooseParamType(modal, ['–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ', 'TextField']);
    if (!okType){ scheduleNext(400); return; }

    // ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º RU –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º RU-–ø–æ–ª–µ–π
    await ensureModalLang(modal, 'ru');

    const reqLabel = findByText('.ant-checkbox-wrapper .ant-checkbox-label', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä', { root: modal, exact:true })?.closest('.ant-checkbox-wrapper');
    if (reqLabel){ realisticClick(reqLabel); log('–û—Ç–º–µ—á–µ–Ω —á–µ–∫–±–æ–∫—Å ¬´–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä¬ª.'); await sleep(80); }

    const ruParamTitle = await waitForSelector('.field-lang._visible .styles_Input__U2Hd0 input', { root: modal });
    if (!ruParamTitle){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ RU ¬´–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞¬ª'); scheduleNext(400); return; }
    const RU_NICK = '–°–°–´–õ–ö–ê –ù–ê STEAM –ü–†–û–§–ò–õ–¨ (–ü—Ä–∏–º–µ—Ä: https://steamcommunity.com/id/nickname/)';
    setReactValue(ruParamTitle, RU_NICK); log('RU –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ù–∏–∫–Ω–µ–π–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');

    // ‚Üí EN
    await ensureModalLang(modal, 'en');

    const enParamTitle = modal.querySelector('.field-lang._visible .styles_Input__U2Hd0 input') || modal.querySelector('.styles_Input__U2Hd0 input');
    if (!enParamTitle){ log('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ EN ¬´–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞¬ª'); scheduleNext(400); return; }
    setReactValue(enParamTitle, 'LINK ON STEAM PROFILE'); log('EN –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ù–∏–∫–Ω–µ–π–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');

    const addBtn = findByText('.ant-modal-footer button span', '–î–æ–±–∞–≤–∏—Ç—å', { root: modal, exact:true })?.closest('button');
    if (!addBtn){ log('‚ùó –í –º–æ–¥–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª'); scheduleNext(400); return; }
    realisticClick(addBtn); log('–ü–∞—Ä–∞–º–µ—Ç—Ä ¬´–ù–∏–∫–Ω–µ–π–º¬ª –¥–æ–±–∞–≤–ª–µ–Ω.');
    await sleep(300);

    state.phase = state.useRegion ? 'pricing_add_region' : 'pricing_next';
    saveState(); refreshPhase();
    scheduleNext(250);
  }

  // PRICING: ¬´–†–µ–≥–∏–æ–Ω¬ª
  async function phasePricingAddRegion(){
    if(!isPricingPage()){ scheduleNext(600); return; }
    log('–§–∞–∑–∞: –î–æ–±–∞–≤–ª—è—é –ø–∞—Ä–∞–º–µ—Ç—Ä ¬´–†–µ–≥–∏–æ–Ω¬ª.');

    const modal = await openAddParamModal();
    if(!modal){ scheduleNext(600); return; }

    const okType = await chooseParamType(modal, ['–†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏', 'RadioButton', 'Radio', 'RadioButtons']);
    if (!okType){ scheduleNext(400); return; }

    // ‚úÖ –∑–¥–µ—Å—å –º–æ–¥–∞–ª —á–∞—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ EN ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º RU
    const ruOk = await ensureModalLang(modal, 'ru');
    if (!ruOk) log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π RU (aria-selected). –ü—Ä–æ–±—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∏–¥–∏–º—ã–µ RU-–ø–æ–ª—è.');

    const ruTitle = await waitForSelector('.styles_Input__U2Hd0 input', { root: modal });
    if (!ruTitle){ log('‚ùó –ù–µ—Ç RU –ø–æ–ª—è ¬´–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞¬ª'); scheduleNext(400); return; }
    setReactValue(ruTitle, '–†–ï–ì–ò–û–ù –ê–ö–ö–ê–£–ù–¢–ê'); log('RU: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ = ¬´–†–ï–ì–ò–û–ù –ê–ö–ö–ê–£–ù–¢–ê¬ª.');

    const ruVariant = modal.querySelector('.style_inputVariant__J5kH1.field-lang._visible input') || modal.querySelector('.style_inputVariant__J5kH1 input');
    if (!ruVariant){ log('‚ùó –ù–µ—Ç RU –ø–æ–ª—è ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞¬ª'); scheduleNext(400); return; }
    const optRU = state.market==='RU' ? '–†–æ—Å—Å–∏—è' : '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω';
    setReactValue(ruVariant, optRU); log(`RU: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ = ¬´${optRU}¬ª.`);

    // ‚Üí EN
    await ensureModalLang(modal, 'en');

    const enTitle = modal.querySelector('.field-lang._visible .styles_Input__U2Hd0 input') || modal.querySelector('.styles_Input__U2Hd0 input');
    if (!enTitle){ log('‚ùó –ù–µ—Ç EN –ø–æ–ª—è ¬´–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞¬ª'); scheduleNext(400); return; }
    setReactValue(enTitle, 'REGION ACCOUNT'); log('EN: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ = ¬´REGION ACCOUNT¬ª.');

    const enVariant = modal.querySelector('.style_inputVariant__J5kH1.field-lang._visible input') || modal.querySelector('.style_inputVariant__J5kH1 input');
    if (!enVariant){ log('‚ùó –ù–µ—Ç EN –ø–æ–ª—è ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞¬ª'); scheduleNext(400); return; }
    const optEN = state.market==='RU' ? 'Russia' : 'Kazakhstan';
    setReactValue(enVariant, optEN); log(`EN: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ = ¬´${optEN}¬ª.`);

    const addBtn = findByText('.ant-modal-footer button span', '–î–æ–±–∞–≤–∏—Ç—å', { root: modal, exact:true })?.closest('button');
    if (!addBtn){ log('‚ùó –í –º–æ–¥–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª'); scheduleNext(400); return; }
    realisticClick(addBtn); log('–ü–∞—Ä–∞–º–µ—Ç—Ä ¬´–†–µ–≥–∏–æ–Ω¬ª –¥–æ–±–∞–≤–ª–µ–Ω.');
    await sleep(300);

    state.phase='pricing_next'; saveState(); refreshPhase();
    scheduleNext(250);
  }

  // PRICING ‚Üí NEXT
  async function phasePricingNext(){
    if(!isPricingPage()){ scheduleNext(600); return; }
    log('–§–∞–∑–∞: –ü–µ—Ä–µ—Ö–æ–¥ –∫ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è¬ª.');

    const nextBtn = await waitFor(()=> findByText('button span', '–î–∞–ª–µ–µ', { exact:true })?.closest('button'), 10000);
    if (!nextBtn){ log('‚ùó –ö–Ω–æ–ø–∫–∞ ¬´–î–∞–ª–µ–µ¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Pricing. –ù–∞–∂–º–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –∏ –∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.'); scheduleNext(800); return; }
    realisticClick(nextBtn); log('–ù–∞–∂–∞—Ç–∞ ¬´–î–∞–ª–µ–µ¬ª ‚Üí –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.');
    if (state.stage === 'stage2'){
      finishStage('–®–∞–≥ ¬´–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞¬ª –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–∞–ø 3 –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.');
      return;
    }
    state.phase='instructions_ru'; saveState(); refreshPhase();
    scheduleNext(900);
  }

  // INSTRUCTIONS: RU
  async function phaseInstructionsRU(){
    if(!isInstructionsPage()){
      const ok = await waitFor(()=>isInstructionsPage(), 15000);
      if(!ok){ log('‚ùó –ù–µ –≤–∏–¥–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è¬ª.'); scheduleNext(800); return; }
    }
    log('–§–∞–∑–∞: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è RU.');
    const marker = await waitFor(()=> findByText('.style_OffersCreationTitleWithHint__fa4kw h5, h5', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è', { exact:true }), 12000);
    if(!marker){ log('‚ùó –ú–∞—Ä–∫–µ—Ä ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.'); scheduleNext(600); return; }

    const ruArea = await waitForSelector('#instructions_ru');
    if(!ruArea){ log('‚ùó –ü–æ–ª–µ #instructions_ru –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); scheduleNext(600); return; }
    const RU_TXT = `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.`;
    setReactValue(ruArea, RU_TXT); log('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è RU –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.');

    state.phase='instructions_en'; saveState(); refreshPhase();
    scheduleNext(250);
  }

  // INSTRUCTIONS: EN
  async function phaseInstructionsEN(){
    if(!isInstructionsPage()){ scheduleNext(600); return; }
    log('–§–∞–∑–∞: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è EN.');

    let enTab = findByText('.ant-tabs-tab .ant-tabs-tab-btn, .ant-tabs-tab[role="tab"] .ant-tabs-tab-btn', 'EN', { exact:true }) ||
                document.querySelector('[data-node-key="en"] .ant-tabs-tab-btn, [data-node-key="en"]');
    if(!enTab){ log('‚ùó –í–∫–ª–∞–¥–∫–∞ EN –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); scheduleNext(600); return; }
    realisticClick(enTab); await sleep(180);

    const enArea = await waitForSelector('#instructions_en');
    if(!enArea){ log('‚ùó –ü–æ–ª–µ #instructions_en –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); scheduleNext(600); return; }
    const EN_TXT = `Thank you for your purchase!\n\nIf you have any problems, please contact our support team.`;
    setReactValue(enArea, EN_TXT); log('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è EN –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.');

    const oid = extractOfferIdFromUrl();
    if (oid){ state.offerId=oid; saveState(); refreshIdBadge(); log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. Offer ID: ${oid}`); }
    else { log('‚ö†Ô∏è ID –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ URL.'); }
    if (state.stage === 'stage3') finishStage('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ñ—Ñ–µ—Ä.');
    else { state.phase='done'; saveState(); refreshPhase(); }
  }

  // ==========================
  // üöÄ Bootstrap + URL watch
  // ==========================
  function boot(){
    ensurePanel();
    if (state.started && state.phase && state.phase!=='done'){ log(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∞–∑—É: ${state.phase}`); scheduleNext(50); }
    setInterval(()=>{
      if (location.href !== state.lastUrl){
        const prev = state.lastUrl; state.lastUrl = location.href; saveState();
        log(`URL –∏–∑–º–µ–Ω–∏–ª—Å—è: ${prev} ‚Üí ${state.lastUrl}`);
        const oid = extractOfferIdFromUrl();
        if (oid && oid !== state.offerId){ state.offerId=oid; saveState(); refreshIdBadge(); log(`Offer ID: ${oid}`); }
        scheduleNext(200);
      }
    }, 500);
  }
  boot();

})();
